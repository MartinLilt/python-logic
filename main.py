import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv

from config import BOT_TOKEN, ADMIN_CHAT_ID, PLATFORMS, RISK, BASE_CURRENCY
from core.arbitrage import pairwise_deals
from core.formatting import as_table
from core.models import Quote

from connectors.trade_site_a import fetch_quotes as fetch_a
from connectors.trade_site_b import fetch_quotes as fetch_b
from connectors.trade_site_c import fetch_quotes as fetch_c

load_dotenv()

async def collect_all():
    qa, qb, qc = await asyncio.gather(fetch_a(), fetch_b(), fetch_c())
    quotes = qa + qb + qc

    by_item = {}
    for q in quotes:
        by_item.setdefault(q.item_key, {})[q.platform] = q
    return by_item

def rows_from_deals(deals):
    headers = ["Item", "Buy@X", "In", "StockX", "Sell@Y", "Out", "StockY", "Profit", "Margin%"]
    rows = []
    for d in deals:
        rows.append([
            d.item_name, d.buy_platform, f"{d.net_buy:.2f}",
            d.stock_buy, d.sell_platform, f"{d.net_sell:.2f}",
            d.stock_sell, f"{d.profit:.2f}", f"{d.margin_pct:.2f}",
        ])
    return headers, rows

async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç‚Äë–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –º–µ–∂–¥—É 3 —Ç—Ä–µ–π–¥‚Äë–ø–ª–æ—â–∞–¥–∫–∞–º–∏.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /whoami ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–≤–æ–π chat_id\n"
        "‚Ä¢ /arbitrage ‚Äî –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∫–∏ (–º–æ–∫‚Äë–¥–∞–Ω–Ω—ã–µ)\n"
        f"–ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: {BASE_CURRENCY}"
    )

async def cmd_whoami(message: Message):
    await message.answer(f"–¢–≤–æ–π chat_id: {message.chat.id}")

async def cmd_arbitrage(message: Message):
    by_item = await collect_all()
    deals = pairwise_deals(by_item, PLATFORMS, RISK)

    if not deals:
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
        return

    for d in deals[:10]:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        text = (
            f"üéØ <b>{d.item_name}</b>\n"
            f"üì• –ü–æ–∫—É–ø–∫–∞: <b>{d.buy_platform}</b> ‚Äî {d.net_buy:.2f} {BASE_CURRENCY} "
            f"(–æ—Å—Ç–∞—Ç–æ–∫: {d.stock_buy})\n"
            f"üì§ –ü—Ä–æ–¥–∞–∂–∞: <b>{d.sell_platform}</b> ‚Äî {d.net_sell:.2f} {BASE_CURRENCY} "
            f"(–ø—Ä–∏–Ω–∏–º–∞—é—Ç: {d.stock_sell})\n"
            f"üí∞ –ü—Ä–∏–±—ã–ª—å: <b>+{d.profit:.2f} {BASE_CURRENCY}</b>   "
            f"üìà –ú–∞—Ä–∂–∞: <b>+{d.margin_pct:.2f}%</b>"
        )
        await message.answer(text, parse_mode="HTML")

async def main():
    token = BOT_TOKEN or os.getenv("BOT_TOKEN", "")
    if not token:
        raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ .env")

    bot = Bot(token)
    dp = Dispatcher()
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_whoami, Command("whoami"))
    dp.message.register(cmd_arbitrage, Command("arbitrage"))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
